{
  "name": "replacecsswithvars",
  "displayName": "Replace CSS values with variables",
  "description": "An extension where you can set source CSS files containing CSS variables and have code lens replacements in your code project",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.86.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:css",
    "onLanguage:scss"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [],
    "configuration": [
      {
        "title": "Color variable settings",
        "properties": {
          "replacecsswithvars.colorSettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains color variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.colorSettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to colors.\nFor example, if you have variables --color-blue-100, you can add color as an item here and it will add all variables with color in for color matching"
          },
          "replacecsswithvars.colorSettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set the css properties to analyse for color values here. You only need to set 1 form of it, for example, if you set background, you dont need to also set background-color",
            "default": [
              "background",
              "color",
              "border"
            ]
          }
        }
      },
      {
        "title": "Font size variable settings",
        "properties": {
          "replacecsswithvars.fontSizeSettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains font size variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.fontSizeSettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to font sizes.\nFor example, if you have variables --font-size-1, you can add font-size as an item here and it will add all variables with font-size in for font size matching"
          },
          "replacecsswithvars.fontSizeSettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set the css properties to analyse for font-size values here. You only need to set 1 form of it, for example, if you set font, you dont need to also set font-size",
            "default": [
              "font-size"
            ]
          }
        }
      },
      {
        "title": "Font weight variable settings",
        "properties": {
          "replacecsswithvars.fontWeightSettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains font weight variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.fontWeightSettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to font weights.\nFor example, if you have variables --font-weight-1, you can add font-weight as an item here and it will add all variables with font-weight in for font weight matching"
          },
          "replacecsswithvars.fontWeightSettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set the css properties to analyse for font-weight values here. You only need to set 1 form of it, for example, if you set font, you dont need to also set font-weight",
            "default": [
              "font-weight"
            ]
          }
        }
      },
      {
        "title": "Font family variable settings",
        "properties": {
          "replacecsswithvars.fontFamilySettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains font family variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.fontFamilySettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to font families.\nFor example, if you have variables --font-family-1, you can add font-family as an item here and it will add all variables with font-family in for font family matching"
          },
          "replacecsswithvars.fontFamilySettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set the css properties to analyse for font-family values here. You only need to set 1 form of it, for example, if you set font, you dont need to also set font-family",
            "default": [
              "font-family"
            ]
          }
        }
      },
      {
        "title": "Line height variable settings",
        "properties": {
          "replacecsswithvars.lineHeightSettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains line height variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.lineHeightSettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to line heights.\nFor example, if you have variables --line-height-1, you can add line-height as an item here and it will add all variables with line-height in for line height matching"
          },
          "replacecsswithvars.lineHeightSettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set the css properties to analyse for line-height values here.",
            "default": [
              "line-height"
            ]
          }
        }
      },
      {
        "title": "Spacing variable settings",
        "properties": {
          "replacecsswithvars.spacingSettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains spacing variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.spacingSettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "margin",
              "padding",
              "gap"
            ],
            "description": "Set the css properties to analyse for spacing values here. You only need to set 1 form of it, for example, if you set margin, you dont need to also set margin-left"
          },
          "replacecsswithvars.spacingSettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to spacings.\nFor example, if you have variables --margin-1, you can add margin as an item here and it will add all variables with margin in for whatever you have in css properties items"
          }
        }
      },
      {
        "title": "Border radii variable settings",
        "properties": {
          "replacecsswithvars.borderRadiiSettings.filePath": {
            "type": "string",
            "default": "absolute-path/to/src/file",
            "description": "Absolute path to source file that contains spacing variables. \nYou can also specify a relative path to the open workspace folder by starting the path with ./"
          },
          "replacecsswithvars.borderRadiiSettings.cssProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "border"
            ],
            "description": "Set the css properties to analyse for border values here. You only need to set 1 form of it, for example, if you set border, you dont need to also set border-radius"
          },
          "replacecsswithvars.borderRadiiSettings.identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you keep all of your css variables in one file, you will need to set a partial of the string name here so that only correct variables are assigned to borders.\nFor example, if you have variables --border-1, you can add border as an item here and it will add all variables with border in for whatever you have in css properties items"
          }
        }
      },
      {
        "title": "Other settings",
        "properties": {
          "replacecsswithvars.otherSettings.watchTrigger": {
            "type": "string",
            "enum": [
              "On save",
              "On text change"
            ],
            "default": "On save",
            "description": "Change how a file is analyzed, by default it is on save. However you can change it to analyze on every text change"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.86.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@typescript-eslint/eslint-plugin": "^6.19.1",
    "@typescript-eslint/parser": "^6.19.1",
    "eslint": "^8.56.0",
    "typescript": "^5.3.3",
    "@vscode/test-cli": "^0.0.4",
    "@vscode/test-electron": "^2.3.9"
  }
}
